# print partten
sed -n '/erors/p' <file_name>

# print certain line
sed -n '1,1p' <file_name>
sed -n '1p' <file_name>

# delete lines of a pattern
sed '/erors/d' <file_name>

# match starting with a give pattern
# ending with a second pattern
sed -n '/^This.*errors.$/p' example

# ranges of lines
sed '2,4d' example

# until last line
sed '3,$d' example

# from a line to another line containing pattern
sed -n '/a text/,/This/p' example

# substitute
sed 's/erors/errors/g' example
# substitute with double quotes
# equal instruction: sed "s/This is/\"This is\"/" example
sed "s/This is/\"&\"/" example
# substitute with single quotes
# equal instaruction: sed 's/'"$pattern"'/This is/' example
pattern="This is"
sed 's,'"$pattern"',This is,' example


# insert a string at the beginning of the each line
sed 's/^/test_string/' example

# insert a string at the ending of the each line
sed 's/$/EOL/' example

# multiple find and replace commands
sed -e 's/erors/errors/g' -e 's/last/final/g' example

# substitute one line
sed -i "1c replacement" <file_name>
# substitute certain lines
sed -i "1,2c replacement" <file_name>
# replace whole line containing a string
# change
sed -i '/text_to_be_replaced/c\new_line'
# replace while bash variable
sed -i '/text_to_be_replaced/c\\${new_line}'

# replace repeating occurrences of x, y, or z with a single underscore _.
echo "$string" | sed -r 's/[xyz]+/_/g'

# find multiple line then replace
# -z: seperate lines with NUL character
sed -z -i 's/first_line\nSeconde_line/new_line/' <file_name>

# insert text in the first line of file
sed -i '1 i <text_string>'


# convert dos to unix Ctrl+M
sed 's/^M$//'
sed $'s/\r$//'
# convert unix to dos Ctrl+M
sed 's/$/^M/'

