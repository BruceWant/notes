# an overview of knows shell on a Linux system
cat /etc/shells


# invoked as an interactive login shell
# Files read:
/etc/profile
~/.bash_profile,~/.bash_login or ~/.profile
# upon logout
~/.bash_logout

# invoked as interactive non-login
~/.bashrc


# POSIX mode
# 1. set built-in
set -o posix
# 2. bash with --posix option
bash --posix


# bash history file
# ~/.bash_history
echo $HISTFILE


# conditionals expressions are used by [[ compound command


# directory stack
# changes the current directory
pushd
# changes the current directory to the directory removed
popd
# display the current directory stack
dirs
# or another way to display stack
echo $DIRSTACK


# source = .
.


# Bourne Shell built-ins:
:, ., break, cd, continue, eval, exec, exit, export, getopts, hash, pwd, readonly, return, set, shift, test, [, times, trap, umask and unset
# Bash built-in commands:
alias, bind, builtin, command, declare, echo, enable, help, let, local, logout, printf, read, shopt, type, typeset, ulimit and unalias

# declare a variable
declare
# remove a variable
unset
# display a list of all varialbes
set
# variable types
string, integer, constant, array
# create local variables
varname="value"
# create globle variable or environment variable
# which means a subshell can use this variable.
export VARNAME="value"


# set prompt
export PS1="\u@\h \w> "


# execute script with spicified shell
sh <script_name.sh>


# debug
# Print command traces before executing command.
set -x
# Disable file name generation using metacharacters (globbing).
set -f
# Prints shell input lines as they are read.
set -v
# debug tools
# http://bashdb.sourceforge.net/


# special parameters
# 1. * for positional parameter start from 1.
# not used
$*
# 2. @ for positional parameter start from 1.
# @ is preferred
$@
# 3. # expands to the number of positional parameters in decimal.
$#
# 4. ? expands to the exit status of the program.
$?
# 5. $ expands to the PID of the shell
$$
# 6. ! expands to the PID of the job
$!
# 7. 0 expands to the name of the shell or script name.
$0
# 8. _ expands to the absolute path
$_


# regular expression operators
# 1. any single character
.
# 2. The preceding item is optional and will be matched, at most, once.
?
# 3. The preceding item will be matched zero or more times.
*
# 4. The preceding item will be matched one or more times.
+
# 5. The preceding item is matched exactly N times.
{N}
# 6. The preceding item is matched N or more times.
{N,}
# 7. The preceding item is matched at least N times,
# but not more than M times.
{N,M}
# 8. represents the range if it's not first or
# last in a list or the ending point of a range in a list.
-
# 9. Matches the empty string at the beginning of a line;
# also represents the characters not in the range of a list.
^
# 10. Matches the empty string at the end of a line.
$
# 11. Matches the empty string at the edge of a word.
\b
# 12. Matches the empty string provided it's not at the edge of a word.
\B
# 13. Match the empty string at the beginning of word.
\<
# 14. Match the empty string at the end of word.
\>
