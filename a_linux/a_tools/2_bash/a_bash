# an overview of knows shell on a Linux system
cat /etc/shells


# invoked as an interactive login shell
# Files read:
/etc/profile
~/.bash_profile,~/.bash_login or ~/.profile
# upon logout
~/.bash_logout

# invoked as interactive non-login
~/.bashrc


# POSIX mode
# 1. set built-in
set -o posix
# 2. bash with --posix option
bash --posix


# bash history file
# ~/.bash_history
echo $HISTFILE


# conditionals expressions are used by [[ compound command


# directory stack
# changes the current directory
pushd
# changes the current directory to the directory removed
popd
# display the current directory stack
dirs
# or another way to display stack
echo $DIRSTACK


# source = .
.


# Bourne Shell built-ins:
:, ., break, cd, continue, eval, exec, exit, export, getopts, hash, pwd, readonly, return, set, shift, test, [, times, trap, umask and unset
# Bash built-in commands:
alias, bind, builtin, command, declare, echo, enable, help, let, local, logout, printf, read, shopt, type, typeset, ulimit and unalias

# declare a variable
declare
# remove a variable
unset
# display a list of all varialbes
set
# variable types
string, integer, constant, array
# create local variables
varname="value"
# create globle variable or environment variable
# which means a subshell can use this variable.
export VARNAME="value"


# set prompt
export PS1="\u@\h \w> "


# execute script with spicified shell
sh <script_name.sh>


# debug
# Print command traces before executing command.
set -x
# Disable file name generation using metacharacters (globbing).
set -f
# Prints shell input lines as they are read.
set -v
# debug tools
# http://bashdb.sourceforge.net/


# special parameters
# 1. * for positional parameter start from 1.
# not used
$*
# 2. @ for positional parameter start from 1.
# @ is preferred
$@
# 3. # expands to the number of positional parameters in decimal.
$#
# 4. ? expands to the exit status of the program.
$?
# 5. $ expands to the PID of the shell
$$
# 6. ! expands to the PID of the job
$!
# 7. 0 expands to the name of the shell or script name.
$0
# 8. _ expands to the absolute path
$_


# regular expression operators
# 1. any single character
.
# 2. The preceding item is optional and will be matched, at most, once.
?
# 3. The preceding item will be matched zero or more times.
*
# 4. The preceding item will be matched one or more times.
+
# 5. The preceding item is matched exactly N times.
{N}
# 6. The preceding item is matched N or more times.
{N,}
# 7. The preceding item is matched at least N times,
# but not more than M times.
{N,M}
# 8. represents the range if it's not first or
# last in a list or the ending point of a range in a list.
-
# 9. Matches the empty string at the beginning of a line;
# also represents the characters not in the range of a list.
^
# 10. Matches the empty string at the end of a line.
$
# 11. Matches the empty string at the edge of a word.
\b
# 12. Matches the empty string provided it's not at the edge of a word.
\B
# 13. Match the empty string at the beginning of word.
\<
# 14. Match the empty string at the end of word.
\>


# introduection fo if
if TEST-COMMAND; then CONSEQUENT-COMMANDS; fi

# primary expressions
# True if FILE exists.
[ -a FILE ]
# True if FILE exists and is a block-special file.
[ -b FILE ]
# True if FILE exists and is a character-special file.
[ -c FILE ]
# True if FILE exists and is a directory.
[ -d FILE ]
# True if FILE exists.
[ -e FILE ]
# True if FILE exists and is a regular file.
[ -f FILE ]
# True if FILE exists and its SGID bit is set.
[ -g FILE ]
# True if FILE exists and is a symbolic link.
[ -h FILE ]
# True if FILE exists and its sticky bit is set.
[ -k FILE ]
# True if FILE exists and is a named pipe (FIFO).
[ -p FILE ]
# True if FILE exists and is readable.
[ -r FILE ]
# True if FILE exists and has a size greater than zero.
[ -s FILE ]
# True if file descriptor FD is open and refers to a terminal.
[ -t FD ]
# True if FILE exists and its SUID (set user ID) bit is set.
[ -u FILE ]
# True if FILE exists and is writable.
[ -w FILE ]
# True if FILE exists and is executable.
[ -x FILE ]
# True if FILE exists and is owned by the effective user ID.
[ -o FILE ]
# True if FILE exists and is owned by the effective group ID.
[ -G FILE ]
# True if FILE exists and is a symbolic link.
[ -L FILE ]
# True if FILE exists and has been modified since it was last read.
[ -N FILE ]
# True if FILE exists and is a socket.
[ -S FILE ]
# True if FILE1 has been changed more recently than FILE2,
# or if FILE1 exists and FILE2 does not.
[ FILE1 -nt FILE2 ]
# True if FILE1 is older than FILE2, or is FILE2 exists and FILE1 does not.
[ FILE1 -ot FILE2 ]
# True if FILE1 and FILE2 refer to the same device and inode numbers.
[ FILE1 -ef FILE2 ]
# True if shell option "OPTIONNAME" is enabled.
[ -o OPTIONNAME ]
# True of the length if "STRING" is zero.
[ -z STRING ]
# True if the length of "STRING" is non-zero.
[ -n STRING ]
[ STRING ]
# True if the strings are equal.
# "=" may be used instead of "==" for strict POSIX compliance
[ STRING1 == STRING2 ]
# True if the strings are not equal.
[ STRING1 != STRING2 ]
# True if "STRING1" sorts before "STRING2"
# lexicographically in the current locale.
[ STRING1 < STRING2 ]
# True if "STRING1" sorts after "STRING2"
# lexicographically in the current locale.
[ STRING1 > STRING2 ]
# "OP" is one of -eq, -ne, -lt, -le, -gt or -ge.
# These arithmetic binary operators return true if "ARG1" is equal to,
# not equal to, less than, less than or equal to,
# greater than, or greater than or equal to "ARG2", respectively.
# "ARG1" and "ARG2" are integers.
[ ARG1 OP ARG2 ]

# combining expressions
# True if EXPR is false
[ !EXPR ]
# Returns the value of EXPR.
# This may be used to override the normal precedence of operators.
[ ( EXPR ) ]
# True if both EXPR1 and EXPR2 are true.
[ EXPR1 -a EXPR2 ]
# True if either EXPR1 or EXPR2 is true.
[ EXPR1 -o EXPR2 ]


# Contrary to [, [[ prevents word splitting of variable values.
# So, if VAR="var with spaces",you do not need to double quote $VAR
# in a test - eventhough using quotes remains a good habit.
# Also, [[ prevents pathname expansion,
# so literal strings with wildcards do not try to expand to filenames
# Using [[, == and != interpret strings to the right
# as shell glob patterns to be matched against the value to the left,
# for instance: [[ "value" == val* ]].


# Boolean operations
# and
&&
# or
||


# case statements
case EXPRESSION in CASE1) COMMAND-LIST;; CASE2) COMMAND-LIST;; ... CASEN) COMMAND-LIST;; esac

# input command: read
read [options] NAME1 NAME2 ... NAMEN
# The words are assigned to sequential indexes of
# the array variable ANAME, starting at 0.
# All elements are removed from ANAME before the assignment.
# Other NAME arguments are ignored.
-a ANAME
# The first character of DELIM is used to terminate the input line,
# rather than newline.
-d DELIM
# readline is used to obtain the line.
-e
# read returns after reading NCHARS characters rather than
# waiting for a complete line of input.
-n NCHARS
# Display PROMPT, without a trailing newline,
# before attempting to read any input.
# The prompt is displayed only if input is coming from a terminal.
-p PROMPT
# If this option is given, backslash does not act as an escape character.
# The backslash is considered to be part of the line. In particular,
# a backslash-newline pair may not be used as a line continuation.
-r
# Silent mode. If input is coming from a terminal,
# characters are not echoed.
-s
# Cause read to time out and return failure
# if a complete line of input is not read within TIMEOUT seconds.
# This option has no effect if read is not reading input from
# the terminal or from a pipe.
-t TIMEOUT
# Read input from file descriptor FD.
-u FD


# redirect stderr and stdout to a file
cmd >> file.txt 2>&1
# or another way
cmd &> file.txt

# This can be done for instance using a hyphen (-)
# to indicate that a program should read from a pipe
ls | cat -

# close file descriptors
exec fd<&-

# here document
cat << BROWSERS
mozilla
links
lynx
konqueror
opera
netscape
BROWSERS

read browser
$browser &



# for loop
for NAME [in LIST ]; do COMMANDS; done

# while loop
while CONTROL-COMMAND; do CONSEQUENT-COMMANDS; done

# until loop
until TEST-COMMAND; do CONSEQUENT-COMMANDS; done
