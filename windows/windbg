dbgx.shell.exe -k com:pipe,port=\\.\pipe\PipeName,resets=0,reconnect


# Setting up debugging with WinDbg and VMware.
setting -> "Add" button -> "Serial POrt" -> Next
-> "Output to named pipe" -> Next
\\.\pipe\pipe_name		# \\.\pipe\wind10_x86
"This end is the server" -> "The other end is an application"
"connect at power on"
"Yield CPU on poll"

# Enable Debugging
bcdedit /debug on
bcdedit /dbgsetting local

# Windows Boot (guest system)
windows XP
boot.ini

windows 7 / 10
Boot Configuration Data(BCD)
bcdedit /dbgsettings serial debugport:Port_number  # Port_number == 2
# enable kernel debug
bcdedit /debug on	# restart guest system

# WinDbg
windbg -b -k com:pipe,port=\\.\pipe\pipe_name,resets=0
# example
windbg -b -k com:pipe,port=\\.\pipe\wind10_x86,resets=0



# network debugging windows kernel
# first on target computer

# turn on debug mode
bcdedit /debug on
# setup host computer ip and port
bcdedit /dbgsettings net hostip:w.x.y.z port:n
# if host has more than one adapter then use Devcie Manager
# to determine the PCI bus, device and function
bcdedit /set "{dbgsettings}" busparams bus.dev.func



# serial debug on vmware
named port

# set host winDbg
-b -k com:pipe,port=\\.pipe\com_1,resets=0,reconnect -y

# set guest os
bcdedit /debsettings serial baudrate:115200 debugport:1
# copy a boot option, named "DebugEntry"
bcdedit /copy {current} /d DebugEntry
# add a 
bcdedit /displayorder {current} {ID}
# active
bcdedit /debug /{ID} ON




# print register value
r register
# print varialbe value
dt driver!variable_name		# display type
# display EPROCESS structure
dt nt!_eprocess
# display a field of a structure
dt nt!_eprocess @eax ImageFileName
# get address of all instance process structure
!process 0 0
# dump process handle table
!handle
# show PEB
!peb
.process /P <pointer_of_EPROCESS>

# list breakpoint
bl

# set breakpoint on line
bp 'source.c:12'
or f9

# set breakpoint but .lines should be enabled
bp (@@masm('main.c:8+'))

bu 'module_name!file.c:206'

# set breakpoint on function
bu module!function_name

#set breakpoint on module name and funciton
bm 'DriverName!DriverEntry'


# Set breakpoint at DriverEntry, when there is no
# source code.

# 1. first method
# Event exception
sxe ld			# when load module break it.
sx			# check event exception status.

# 2. load driver in OS
# At this time, control flow back into Windbg.

# 3. find module base address
lm n m <driver_name>

# 4. analyze PE header file
!dh -a <start_address_from_step_3>	# in the 
					# OPTIONAL HEADER VALUES
					# section, find row
					# that is "address of
					# entry point"
# 5. set breakpoint at DriverEntry
bp <driver_name>+<DriverEntry_address>
					# e.g. bp procmon24+0xFB4

# set conditional breakpoints
bp <Address> "j (<condition) '[optionalCommands]'; 'gc' "
# another way
bp <Address> ".if (<condition> {[optionalComands]} .else {gc}"

# set conditional breakpoint at PspInsertProcess
bp nt!PspInsertProcess "$$<path_to_windbg.txt"
# for example
bp nt!PspInsertProcess "$$<D:\\reverse\\windbg\\scritp.txt"
# the content of the script.txt
r? $t1 = ((nt!_eprocess*) @rbx);                    # under windows 10 rbs is EPROCESS
as /ma ${/v:ImageName} @@c++(@$t1->ImageFileName);
.echo ${ImageName}
j ($spat("${ImageName}", "notepad*) == 0) gc;       # notepad* is the program you want

# list windows kernel version
vertarget


#   sets the symbol path point to the microsoft
# + symbol store
.symfix
# list the symbol path
.sympath
# add the symbol path
.sympath+ Directory
# set the source path
.srcpath+ Directory
# delete symbols and reload it as needs
.reload


# address range
# The real address. x86-based and x64-based
&[[ segment:]] offset
#   A segmented 32-bit or 64-bit address.
# + x86-based and x64-based
%segment:[[ offset]]
#   An absolute address (32-bit or 64-bit)
# + in virtual memory space. x86-based and x64-based
%[[ offset]]
#   A flat 32-bit or 64-bit address.
# + name can be any symbol. offset specifies
# + the offset. This offset can be whatever
# + address mode its prefix indicates.
name[[ +|âˆ’ ]] offset


# dereference pointer
poi( 0x12345678 )

# address range
12345670 12345677
12345670 L1


# display selector
dg first second


# unassemble
u address
u range


# Breaking on User-Mode process Creation
bp nt!PspInsertProcess L20


# step
p
