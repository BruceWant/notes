ssh
# temporarily stat up the ssh service

systemctl start ssh.socket
systemctl stop ssh.socket

/etc/init.d/ssh restart

# run after system boot
update-rc.d ssh enable


#permanently enable the ssh service when the system is booted

systemctl enable ssh.service
systemctl start ssh.service	# use ssh immediately without
				# having to reboot
systemctl status ssh.service	# check the status of the service
systemctl stop ssh.service	# stop the ssh service
systemctl disable ssh.service	# disable the ssh service so it no longer
				# starts at boot
/etc/init.d/ssh restart		# restart ssh
sudo service ssh restart	# restart ssh


git
# add a remote url to a git repository

git remote add origin git@github.com:BruceWant/something
# something equal delete old url and add new url
git remote set-url origin git@github.com:BruceWant/something_else
git push -u origin master
# show origin remote url
git config --get remote.origin.url
git remote show origin



vim
# save a read noly file

:w !sudo tee %			# :w - write a file
				# !sudo - call shell with sudo command
				# tee - the output of write (vim :w)
				# command redirected using tee
				# % - the % is nothing but current file
				# name.

Ctrl + V (uppercase)
select lines, go to first column
Shift + I (uppercase)
press whatever punctuaction that comment a line
press Esc , or press x for uncomment


gdb
# step into
si

# print the value of register
p /d $eax	# decimal
p /x $eax	# hex
p /t $eax	# binary
p /f $eax	# floating point
p /i $eax	# instruction
p /c $eax	# character

#print the value at address
x/s 0x1234	# x/s hex_address   print value as string
x/d 0x1234	# x/d hex_address   print value as decimal
x/i 0x1234	# x/i hex_address   print value as instruction
x/8xw 0x1234	# x/8xw hex_address print 8 four-byte words in hex format
help x
i r eax

#print the address of a variable
info address variable	# e.g.	info address var_name

# print the value of all registers
info registers
#shortcut
i r

# set breakpoint at address 0x7c00
break *0x7c00
# continue until the next breakpoint
c
# through instructions N at a time
si N
# examine instructions in memory
x/i
# N is the number of consecutive instructions
# and ADDR is the memory address to start
x/Ni ADDR


tcpdump
# capture the specified port Protocol Tcp
tcpdump -ni ens33 tcp port 5788




#ubuntu 18.04 install input
sudo apt-get install ibus-pinyin
# or
sudo apt-get install fcitx-pinyin

2. setting->region&language->manage installed language
3. input sources


# ubuntu install kernel source code 
apt-cache search linux-source
apt-get source linux-source-$(result from "apt-cache search linux-source")


# 6.828
cd ~/6_828/6.828mit/lab
# login to JOS
make qemu
# quit from JOS
ctrl+a x

# debug JOS
make qemu-gdb
make gdb


# asm
gcc -S hello.c
gcc -S -o asm.s hello.c
gcc -g -o hello hello.c
objdump -S --disassemble hello > hello.dump

start
break linenumber
layout asm


# objdump
# examine the full list of the names, size,
# and link addresses of all the section
objdump -h objectfile
VMA: link address
LMA: load address
# inspect the program headers
objdump -x objecfile
# see the entry point of the executable
objdump -f objecfile


# get environment variable 
printenv VARIABLE_NAME
env
set		# assigns a environment variable
unset		# delete environment variable
export		# exports the value of the 
		# newly assigned environment variable

# add a directory to the environment variable path
sudo vim ~/.bashrc
export PATH="/home/user_name/bin:$PATH"
# or another way
vim ~/.profile
if [ -d "$HOME/bin" ] ; then
	PATH="$PATH:$HOME/bin"
fi


# compress file and uncompress
tar -xvf filename.tar.gz	# or -zxvf
tar -xvf filename.tar.bz2	# or -jxvf
tar -xvf filename.tar.xz	# or -Jxvf
tar -xvf filename.tar.Z		# or -Zxvf
unrar x	filename.rar		# install unrar-free
gzip	filename		# compress filename
gunzip	filename.gz		# uncompress filename
unzip filename.zip

z:	gzip			压缩格式
x:	extract			解压
v:	verbose			详细信息
f:	file(file=archieve)	文件



# Ubuntu install cross-platform compiler: mingw-w64
sudo apt install mingw-w64

# use it
x86_64-w64-mingw32-gcc		# 64 bit
i686-w64-mingw32-gcc		# 32 bit



# shared and static library
# 1. shared library
gcc test.c -fPIC -shared -o libtest.so
				# -fPIC represent position 
				# nonrelated code.
readelf -h libtest.so		# Check the header of the
				# the libtest.so.
gcc -o main main.c -L . -ltest	# Linking when load program.
ldd main			# Check shared libarary
				# denpendency.
cp libtest.so /usr/lib		# Copy shared libaray to
				# system library.
export LD_LIBRARY_PATH=./	# Or add envaironment variable.
gcc main.c -ldl -L . -o main	# Linking when used module.

# 2. static library
gcc -c test1.c			# produce test1.o
readelf -h test1.o		# check the header of the
				# test1.o
ar -rcs libtest1.a test1.o	# produce static library
				# libtest1.a
ar -t libtest1.a		# check content of the libtest1.a

				# liking libtest1.a into main
				# ./ means libtest1.a on the 
				# current directory.
gcc -o main main.c -L ./ -ltest1
				# test0.c call function that in
				# test1.c.
gcc -o main main.c -L ./ -ltest1 -ltest0


# egypt usage
egypt ../common-main.c.229r.expand add.c.229r.expand | dot -Gsize=3000,3000 -Grankdir=LR -Tpng -o ~/callgraph/callgraph.png

# build 32 bit program on x86_64 architecture processor
# 1. check the architecture of the processor. The output should be adm64
dpkg --print-architecture
# 2. confirm the multi-architecture already opened. The output should be i386
dpkg --print-foreign-architectures
# 3. If no opened, then open the multi-architecture function.
sudo dpkg --add-architecture i386
sudo apt-get update
sudo apt-get dist-upgrade
# 4. last install the gcc and g++ 32 bit library.
 apt-get install gcc-multilib g++-multilib 


# resize or extend virtualbox disk size
# 1. configuration of virtualbox
settings -> storage -> controller:SATA -> adds hard disk
create new disk -> VDI -> Dynamically allocated -> create
# 2. mount partition on ubuntu guest
# 2.1 check disk status
df -h
fdisk -l
# 2.2 partition the disk
fdisk /dev/sdb          # /dev/sdb from 'fdisk -l' command
# 2.3 type <p, n enter, enter, enter> in order
# 2.4 save the work
w
# 2.5 format the disk
mkfs -t ext4 /dev/sdb1
# 2.6 mount the filesystem /dev/sdb1
mount /dev/sdb1 /mnt/lfs
# 2.7 set mounting automatically
vim /etc/fstab
# 2.8 add following contents.
/dev/sdb1 /mnt/lfs ext4 defaults 0 0


# get default router IP address
ip route list
# get IP and MAc address
ip neigh


#查看 filter 表中的规则
# -t: 表的类型； -L：列出表中的规则
iptables -t filter -L

# 查看 raw 表中的规则
iptables -t raw -L

# 查看 mangle 表中的规则
iptables -t mangle -L

# 查看 nat 表中的规则
iptables -t nat -L

# 查看指定表中的指定链的规则
iptables -t filter -L INPUT
# 查看指定表中的指定链的详细规则
iptables -t filter -vL INPUT
# 不对IP地址进行名称反解，直接显示IP地址
# -n：直接显示IP地址
iptables -t filter -nvL INPUT

# --line-number：显示规则的编号
iptables -t filter --line-number -nvL INPUT

# -x：获取当前链默认策略匹配到的包的大小总和
iptables -t filter -nvxL INPUT


# 在首行插入规则
# -I：insert，插入INPUT链中
# -s：source，指明“匹配条件”中的“源地址”
# -j；jump，当满足条件是，执行相应的动作
iptables -t filter -I INPUT -s 192.168.0.12 -j DROP

# 在末尾追加规则
iptables -t filter -A INPUT -s 192.168.0.12 -j ACCEPT

# 在指定的位置中，插入规则
# 将当前的规则插入到编号为2的规则中
iptables -t filter -I INPUT 2 -s 192.168.0.12 -j DROP


# 删除规则
# 根据行号删除规则，删除第三行规则
# -D: delete
iptables -t filter -D INPUT 3

# 根据匹配条件与动作去删除规则
# 源地址：192.168.0.12；动作：ACCEPT
iptables -D INPUT -s 192.168.0.12 -j ACCEPT

# 删除表中某条链中所有的规则
# -F: flush，冲掉指定的链， 没有指定链名时，会清空表中的所有规则
iptables -t filter -F INPUT

# 修改规则
# 将编号为 1，匹配条件为：-s 192.168.0.12 的动作改为 REJECT，匹配条件不可或缺
iptables -t filter -R INPUT 1 -s 192.168.0.12 -j REJECT

# 修改表的默认动作
# -P；policy，表示要修改哪个表的默认规则
iptables -t filter -P FORWARD DROP

# 保存临时修改的iptables规则


# 匹配条件详解
# 使用逗号分隔多个匹配条件
iptables -t filter -I INPUT -s 192.168.1.111,192.168.1.112 -j DROP

# 指定某个网段的匹配条件
iptables -t filter -I INPUT -s 10.6.0.0/16 -j DROP

# 对匹配条件取反
# 只要源地址不是 192.168.0.12，那么就满足条件
iptables -t filter -A INPUT ! -s 192.168.0.12 -j ACCEPT

# 匹配条件为目标地址
iptables -t filter -I INPUT -s 192.168.0.12 -d 192.168.1.12 -j DROP

# 匹配协议类型
# -p：协议类型, -p all: 所有类型
iptables -I INPUT -s 192.168.1.146 -d 192.168.1.156 -p tcp -j REJECT

# 匹配网卡接口
# -i：in-interface，流入使用网卡名称
iptables -t filter -I INPUT -i eth4 -p icmp -j DROP

# -o: out-interface, 流出使用网卡名称
iptables -t filter -I INPUT -o eth4 -p icmp -j DROP


# 扩展匹配条件
# -m: 指定对应的扩展模块为tcp；
# --dport：指定端口号；指定端口号时，必须要有-p，-m参数配合使用；
iptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m tcp --dport 22 -j REJECT

# 匹配条件为源端口
# --sport：源端口
iptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m tcp --sport 22 -j REJECT

# 端口取反
# ! --dport 22:表示目标端口不是22的报文会被匹配到

# 指定端口范围
# --dport 22:25 表示22-25之间所有的端口
iptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m tcp --sport 22:25 -j REJECT
# --dport :22 表示0-22之间所有的端口
# --dport 80: 表示80-65535 之间所有的端口

# 使用multiport指定多个、离散的端口
iptables -t filter -I INPUT -s 192.168.0.12 -p -tcp -m multiport --dports 22,36,80 -j DROP


# show arp tables
ip neighbor show


# compile apue, install libbsd-dev
sudo apt install libbsd-dev
sudo cp include/apue.h /usr/include/
sudo cp lib/libapue.a /usr/local/lib/


# list the ttyUSB
ll /sys/class/tty/ttyUSB*
ll /sys/class/tty/*/device/driver

ll /sys/class/tty/ttyUSB0/

cat /sys/class/tty/ttyUSB0/dev

ll -R /dev | grep "major, *minor node"

# or another way
dmesg | grep tty

# udevadm monitor:
# This will show you the USB device being loaded
# as the USB Bus sees it.
udevadm monitor

# detect usb device, in a terminal
lsusb

lsinput


# check network adapter names
sudo lshw -class network -short


# resolve adb on Ubuntu, error:device not found
# 1. list usb
~$ lsusb
~$ Bus 003 Device 011: ID 2717:9039
# 2. create adb_usb.ini in ~/.android
echo > 0x2717 > ~/.android/adb_usb.ini
# 3. add rights
~$ sudo vim /etc/udev/rules.d/70-android.rules
# contents of the 70-android.rules
SUBSYSTEM=="usb",ATTRS{idVendor}=="2717",ATTRS{idProduct}=="9039",MODE="0666"
# 4. add plugdev group
~$ groupadd plugdev
# 5. add user to plugdev group
~$ sudo usermod -a -G plugdev <user_name>
# 6. restart USB service
~$ sudo chmod a+rx /etc/udev/rules.d/70-android.rules
~$ sudo service udev restart
# 7. not necessary. reload the rules
~$ sudo udevadm control --reload-rules
~$ sudo service udev restart
~$ sudo udevadm trigger
# 8. restart adb service
~$ sudo adb kill-server
~$ sudo adb start-server


# Ubuntu uninstall app
sudo apt-get purge <app_name>
# remove config file
sudo apt-get autoremove
sudo apt-get clean


# create a swap
sudo dd if=/dev/zero of=swap bs=1024 count=<num>
sudo mkswap -f swap
# vim /etc/fstab
/opt/swapfile/swap swap swap sw 0 0
sudo swapon swap
# turn off swap
sudo swapoff swap
# set vm.overcommit_memory=2
/proc/sys/vm/overcommit_memory

# check the status of swap space
cat /proc/swaps
grep 'Swap' /proc/meminfo


# check the status of DNS on ubuntu 20.04
sudo systemd-resolv --status
# lower version
nm-tool


# Both stderr and output displayed on the console and in a file
<command> 2>&1 | tee <log_name>


# cross compile gdb and gdbserver
# compile gdb run on Windows and debug arm program
../configure --host=i686-w64-mingw32 --target=arm-none-linux-gnueabi --prefix=$PWD/bin_wlt --disable-werror
# compile gdbserver on x86_64 Ubuntu
./configure --target=arm-none-linux-gnueabi --host=arm-none-linux-gnueabi --build=x86_64 --prefix=$PWD/build
# run gdbserver over TCP on target system
# host IP: 192.168.1.28
./gdbserver 192.168.1.28:6666 /program_path
# target IP: 192.168.1.30
gdb.exe /program_path
(gdb) target remote 192.168.1.30:6666
